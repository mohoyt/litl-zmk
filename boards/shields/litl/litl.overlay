#include <dt-bindings/zmk/matrix_transform.h>
#include "litl-layouts.dtsi"

/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,physical-layout = &layout_all;
    };

    /* Map scan row/col -> key positions (row-major) */
    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        rows = <8>;
        columns = <6>;
        map = <
            RC(0,0)  RC(1,0) RC(0,1) RC(1,1) RC(0,2) RC(1,2) RC(0,3) RC(1,3) RC(0,4) RC(1,4) RC(0,5) RC(1,5) 
            RC(2,0)  RC(3,0) RC(2,1) RC(3,1) RC(2,2) RC(3,2) RC(2,3) RC(3,3) RC(2,4) RC(3,4) RC(2,5) RC(3,5)
            RC(4,0)  RC(5,0) RC(4,1) RC(5,1) RC(4,2) RC(5,2) RC(4,3) RC(5,3) RC(4,4) RC(5,4) RC(4,5) RC(5,5)    
            RC(6,0)  RC(7,0) RC(6,1)         RC(6,2) RC(7,2) RC(6,3) RC(7,3) RC(6,4) RC(7,4) RC(6,5) RC(7,5)      
        >;
    };

    kscan0: kscan_0 {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        diode-direction = "row2col";
        wakeup-source;

        col-gpios
        =  <&pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        ,  <&pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        ,  <&pro_micro 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        ,  <&pro_micro 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        ,  <&pro_micro 16 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        ,  <&pro_micro 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        ;

        row-gpios 
        =  <&pro_micro 8 GPIO_ACTIVE_HIGH>
        ,  <&pro_micro 9 GPIO_ACTIVE_HIGH>
        ,  <&pro_micro 4 GPIO_ACTIVE_HIGH>
        ,  <&pro_micro 5 GPIO_ACTIVE_HIGH>
        ,  <&pro_micro 6 GPIO_ACTIVE_HIGH>
        ,  <&pro_micro 7 GPIO_ACTIVE_HIGH>
        ,  <&pro_micro 20 GPIO_ACTIVE_HIGH>
        ,  <&pro_micro 21 GPIO_ACTIVE_HIGH>
        ;
    };
};

/* === (Optional) EC11 rotary encoder(s) ===
 * Copy ENCODERS_PAD_A/B from QMK if you use encoders.
 * You can add multiple encoder nodes and list them in &sensors.
 * Encoders in ZMK are "sensors" (rotation) + a separate key for the push switch.
 * Docs: hardware & feature pages: https://zmk.dev/docs/development/hardware-integration/encoders
 */
// Example with a single encoder (replace pins):
/*
&sensors {
    compatible = "zmk,keymap-sensors";
    sensors = <&ec11_left>;         // list all encoders here
    triggers-per-rotation = <24>;   // set to your detents (common: 18, 20, 24)
};

ec11_left: ec11_left {
    compatible = "alps,ec11";
    // TODO: pins from your QMK ENCODERS_PAD_A/B (Pro Micro names)
    a-gpios = <&pro_micro D4 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
    b-gpios = <&pro_micro D5 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
    steps = <24>;  // matches your detents
    status = "okay";
};
*/

/* === (Optional) OLED / Nice!View ===
 * Litl has an OLED footprint; ZMK supports SSD1306 and nice!view.
 * If you go SSD1306 via I2C, define an I2C bus (or use the boardâ€™s default)
 * and add a display node. For Nice!View you add "nice_view" as an extra shield.
 * Docs/guides: https://zmk.dev/docs/config/displays
 */
// Example (i2c SSD1306 at 0x3C):
/*
&i2c0 {
    status = "okay";
    sda-pin = <&pro_micro D1>;  // TODO: your SDA pad
    scl-pin = <&pro_micro D0>;  // TODO: your SCL pad

    ssd1306@3c {
        compatible = "solomon,ssd1306fb";
        reg = <0x3c>;
        width = <128>;
        height = <32>;
        segment-remap;
        com-invdir;
    };
};
*/